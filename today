#!/usr/bin/python2

from collections import namedtuple
import sys
import os
import time

import argh
import argcomplete

from misc import AtomicReplace

cli = argh.EntryPoint()
Action = namedtuple('Action', ['name', 'future_tense', 'interval', 'last'])
STATE_FILE = os.path.expanduser("~/.today")


def load():
	data = []
	with open(STATE_FILE) as file:
		for line in file:
			line = line.strip()
			if not line:
				continue
			if line.startswith('#'):
				continue
			parts = line.split()
			parts = [f(v) for f, v in zip((str, str, int, int), parts)]
			data.append(Action(*parts))
	return data

def write(actions):
	with AtomicReplace(STATE_FILE) as tmp:
		with open(tmp, 'w') as f:
			for action in actions:
				f.write(" ".join(map(str, action)) + "\n")

action_info = load()
names = [action.name for action in action_info]

@cli
@argh.arg('actions', metavar='ACTION', choices=names + ['should'], nargs='+')
def i(actions, yesterday=False, ago=0):
	"""
	--ago specifies days ago you did it
	--yesterday is a shortcut for --ago 1
	"""

	today = (int(time.time() / 3600) - 6) / 28
	if yesterday:
		ago = 1
	today -= ago

	if 'should' in actions:
		if actions != ['should']:
			raise argh.CommandError("Cannot combine 'should' with other actions")
		for action in action_info:
			overdue = today - (action.last + action.interval)
			if overdue >= 0:
				print "Today you should {} (overdue by {}d)".format(action.future_tense, overdue)
		return

	for i, a in enumerate(action_info):
		if a.name in actions:
			action_info[i] = a._replace(last=today)

	write(action_info)


@cli
def report():
	today = (int(time.time() / 3600) - 12) / 28
	for action in action_info:
		overdue = today - (action.last + action.interval)
		if overdue > 0:
			next_text = 'overdue by {} days'.format(overdue)
		elif overdue < 0:
			next_text = 'next in {} days'.format(-overdue)
		else:
			next_text = 'due today'
		print "Every {a.interval} days, you should {a.future_tense}. You last {a.name} {ago} days ago ({next_text})".format(
			a=action, ago=today - action.last, next_text=next_text,
		)

@cli
def completion():
	print argcomplete.shellcode(os.path.basename(sys.argv[0]), shell="bash")


if __name__ == '__main__':
	cli()
