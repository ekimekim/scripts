#!/bin/bash

# NOTE: This script is intended to be called by udev, and so should not start any long-term procs.
# Be aware that it will run as root.

USAGE="
`basename $0` DEV PATH {MOUNT_ARGS}

This script will mount a device and fill it with music
taken from an awp playlist.
Args are as follows:
	DEV: Path to device to mount
	PATH: Path within the mounted fs to place files
	MOUNT_ARGS: Optional additional args to mount
"

PLAYLIST="/home/mike/music/main.awp"
MIN_REMAINING="$((1024 * 1024))" # 1MiB
LOGFILE="/var/log/usb-populate.log"

cleanup() {
	if [ -d "$MOUNTPOINT" ]; then
		umount "$MOUNTPOINT"
		rmdir "$MOUNTPOINT"
	fi
}

die() {
	cleanup
	local code="$1"
	shift
	echo "$@" >&2
	exit "$code"
}

[ $# -lt 2 ] && die 255 "$USAGE"

echo "$0" "$@" >> "$LOGFILE"

DEV="$1"
TARGET="$2"
shift 2

MOUNTPOINT="$(mktemp -p /mnt -d)"
[ -n "$MOUNTPOINT" ] || die 1 "Failed to create temporary mount point"

mount "$DEV" "$MOUNTPOINT" "$@" || die 2 "Failed to mount"

# clear old files first
rm "$MOUNTPOINT/$TARGET/"*

get_remaining() {
	local ret="$(df --output=size -B 1 "$DEV" | tail -n+2)"
	[ -n "$ret" ] || die 3 "Failed to get df output"
	echo "$ret"
}
echo "Populating $DEV with $(get_remaining) bytes" >> "$LOGFILE"

python -m awp.generate "$PLAYLIST" |
for ((n=0; 1; n++)); do
	read file
	echo "Considering $file" >> "$LOGFILE"
	[ -f "$file" ] || { echo "file does not exist: $file" >&2; continue; }
	filesize="$(stat -c %s "$file")"
	[ -n "$filesize" ] || { echo "failed to get size of: $file" >&2; continue; }
	remaining="$(get_remaining)"
	newremaining="$((remaining - filesize))"
	[ "$newremaining" -gt "$MIN_REMAINING" ] || break
	filebase="$(basename "$file")"
	filenum="$(printf "%04d" "$n")"
	cp "$file" "$MOUNTPOINT/$TARGET/$filenum-$filebase" || continue
	echo "Copied $MOUNTPOINT/$TARGET/$filenum-$filebase" >> "$LOGFILE"
done
echo "Complete" >> "$LOGFILE"

cleanup
