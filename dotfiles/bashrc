
# PS1 config
PS1='[\t] \u@\h:\w\$ '
source "$HOME/bin/alerts.ps1.bash"
source "$HOME/bin/gitcolours.ps1.bash"

# Put readline into vi mode
set -o vi

# This sets env vars and sets up keychain if needed, without locking the agent
source "$HOME/bin/setup-keychain.bash" -Q

# Add ruby gem executables to path
for rubypath in /home/mike/.gem/ruby/*/bin; do
	PATH="$rubypath:$PATH"
done
# Add ~/bin to PATH, allowing user-specific scripts to be called anywhere
PATH="$HOME/bin:$PATH"

# source auto-complete scripts
source "/usr/share/git/completion/git-completion.bash"
source "/usr/share/bash-completion/completions/pass"
source "$HOME/bin/git-alias-completion.bash"

# Custom functions
spawn() {
	local USAGE="spawn PROGRAM {ARGS}\nSpawn a program and disown it, redirecting everything to /dev/null."
	if [ "$#" -lt 1 ]; then echo -e "$USAGE"; return 1; fi
	local PROGRAM=$1
	shift
	"$PROGRAM" "$@" </dev/null >/dev/null 2>/dev/null &
	disown
}
complete -c spawn

ytplay() {
	# Credit to https://github.com/exogen/dotfiles
	# Skip DASH manifest for speed purposes. This might actually disable
	# being able to specify things like 'bestaudio' as the requested format,
	# but try anyway.
	youtube-dl --default-search=ytsearch: \
	       --youtube-skip-dash-manifest \
	       --output="/tmp/%(title)s-%(id)s.%(ext)s" \
	       --restrict-filenames \
	       --format="bestaudio" \
	       --exec='mplayer -vo null -softvol -volume 50' "$*"
}

twitch_play() {
	if [ "$#" -lt 1 ]; then
		echo "USAGE: $0 CHANNEL [QUALITY {MPLAYER_ARGS}]" >&2
		return 255
	fi
	local channel="$1"
	local quality="${2:-source}"
	shift 2
	livestreamer twitch.tv/"$channel" "$quality" --player "mplayer -cache 1024 $* -"
}

pyedit() {
	local target="$1"
	shift 1
	local path="$(pypath "$target")"
	[ -n "$path" ] && "$EDITOR" "$path" "$@"
}

# list pacnew files present in /etc
list_pacnew() {
	find '/etc' \
		-type d \! -perm '-g+r,u+r,o+r' -prune \
		-or -type f -name '*.pacnew' -print
	# first line omits unreadable directories, second line searches for pacnew files
}
check_pacnew() {
	[ -z "$(list_pacnew)" ]
}
diff_pacnew() {
	for path in $(list_pacnew); do
		original="${path%.pacnew}"
		sudo patch-interactive "$original" "$path" || break
	done
}

# exit success if bashrc has not changed since executing (matches saved hash of bashrc)
# 
# note: vulnerable to a race if edited while executing, causing a false success,
# but not a real risk.
# note: doesn't check other files, only ~/.bashrc
check_bashrc() {
	local new_digest=`sha512sum "$HOME/.bashrc" | cut -f1 -d' '`
	[ "$new_digest" == "$BASHRC_DIGEST" ]
}
BASHRC_DIGEST=`sha512sum "$HOME/.bashrc" | cut -f1 -d' '`

# Warn if our running kernel is no longer our installed kernel
# (we need to reboot). This happens when the linux package is upgraded.
check_kernel_version() {
	[ -d "/usr/lib/modules/$(uname -r)" ]
}

# Colour aliases
alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias tree='tree -C'

# Privilige aliases
alias _pacman="`which pacman`" # _pacman is unpriviliged pacman, eg. _pacman -Ss
alias pacman='sudo pacman'
alias pip='sudo pip2'
alias svim='sudo vim'
alias scat='sudo cat'
alias sumv='sudo mv'
alias sucp='sudo cp'
alias shutdown='sudo shutdown'
alias reboot='sudo reboot'
alias poweroff='sudo poweroff'
alias systemctl='sudo systemctl'
alias 'systemctl-user'="$(which systemctl) --user"
alias docker='sudo docker'
alias ip='sudo ip'
alias fuck='sudo $(history -p \!\!)'
alias 'wifi-menu'='sudo wifi-menu'

# Other aliases
alias commit='git commit -av'
alias status='git status -sb'
alias clock-small='watch -n1 date'
alias pso='ps -o pid,start,command'
alias rflakes='find -name "*.py" -exec pyflakes {} +'
alias rflakes-watch='watch -pn.2 "find -name \\*.py -exec pyflakes {} +"'
alias ':q'='sl'
alias vun='sl'
alias ks='sl'
alias diff='diff -u'
alias ''='clear'
alias ''='cd && clear'
alias browser='spawn $BROWSER'
alias mplayer-music='mplayer -vo null -softvol -volume 50'
alias monstercat='twitch_play monstercat audio'
alias xclip='xclip -selection clipboard'
alias pass='DISPLAY= pass' # disable display so gpg doesn't make annoying popup prompt
alias 'pip-upgrade'='pip install -U --no-deps'
# ^X: cd to `pwd` - this "refreshes" the fd if the dir has been destroyed/recreated (eg. in a git rebase)
alias ''='cd ~+'

# PS1 alerts (see alerts.ps1.bash)
ALERTS=(check_bashrc check_pacnew check_kernel_version)

# Env vars
HISTFILESIZE=$(( 1024 * 1024 ))
HISTSIZE=$(( 1024 * 1024 ))
export EDITOR='vim'
export VISUAL='vim'
export BROWSER='chromium'
export PAGER='less'
export LESS='-SR'
export BANNER='banner-stripped -c# -f2'
export PYTHONSTARTUP="$HOME/.pythonrc"
export QUOTING_STYLE='literal'
[ -f "$HOME/.secrets" ] && source "$HOME/.secrets" # set sensitive env vars, eg. api secrets

# Misc completions
complete -c which
