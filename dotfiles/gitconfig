[user]
	email = mikelang3000@gmail.com
	name = Mike Lang

[core]
	excludesfile = ~/.gitignore
	hooksPath = ~/.githooks

[alias]
	lg = log --graph --pretty=format:'%Cred%h%Creset - %Cgreen%an%Creset -%C(auto)%d%Creset %s %Cgreen(%ad)%Creset' --abbrev-commit --date=relative
	log-diff = log --decorate=short --pretty=fuller -p
	log-diff-upstream = !git log-diff ..@{u} --reverse --date=relative
	initial = commit --allow-empty -m 'Initial Commit'
	all = !git lg --all
	allrefs = "!git reflog | cut -f1 -d\" \" | xargs git lg"
	get = fetch --all
	fpush = push --force-with-lease
	co = checkout
	master = checkout master
	rim = rebase -i master
	b = rev-parse --symbolic-full-name HEAD
	pr = !hub pull-request

	# === The form: "!f(){ ... ;}; f" allows positional params without also appending all params to the end ===
	herp = "!f(){ git commit -am \"fixup: $*\" ;}; f"
	derp = "!f(){ git commit -m \"fixup: $*\" ;}; f"
	todo = "!f(){ git commit --allow-empty -m \"TODO $*\" ;}; f"
	wip = "!f(){ git commit -anm \"wip: $*\" ;}; f"
	archive-branch = "!f(){ for b in \"$@\"; do git branch -m \"$b\" \"archive-$b\"; done ;}; f"
	br = "!f(){ git branch \"$@\" -v --color --list | grep -v '^  archive/' | sniplines ;}; f"

	# display a diff consisting of all commits on $2 (default HEAD) but not $1 (default master)
	diff-branch = "!f(){ base=\"${1:-master}\"; target=\"${2:-HEAD}\"; git diff $(git merge-base \"$base\" \"$target\") \"$target\"; }; f"

	# git lg $1 and upstream of $1 (default HEAD)
	lgu = "!f(){ git lg $(git rev-parse \"${1:-HEAD}\" \"${1:-HEAD}@{upstream}\" 2>/dev/null) ;}; f"

	# git lg all decendents of $1~{$2} (defaults HEAD, 10)
	most = "!f(){ git lg --ancestry-path \"${1:-HEAD}~${2:-10}..\" --all ;}; f"

	# git lg all local branches
	lglocal = "!git for-each-ref --format=\"%(objectname)\" refs/heads | xargs git lg"

	# del-remote BRANCH [REMOTE]: Delete branch on remote repo (default origin)
	del-remote = "!f(){ git push \"${2:-origin}\" \":${1:=No branch given}\" ;}; f"

	# pushorigin [REMOTE]: Push current branch to REMOTE current branch, setting upstream
	pushorigin = "!f(){ git push \"${2:-origin}\" \"$(git rev-parse --abbrev-ref HEAD)\" -u ;}; f"

	# set [BRANCH [REF]]: Sets BRANCH (default head) to REF. Note HEAD is interpreted as BRANCH, not current HEAD. REF defaults to upstream.
	set = "!f(){ upstream='@{u}'; git with \"${1:-HEAD}\" git reset --hard \"${2:-$upstream}\" ;}; f"

	# del-merged [BRANCH]: Delete all branches merged into BRANCH (default: master)
	del-merged = "!f(){ target=\"${1:-master}\"; git branch --merged \"$target\" | grep -v \" $target\\$\" | xargs git branch -d ;}; f"

	# bi GOODREF COMMAND {ARGS}: 'git bisect run COMMAND ARGS' from GOODREF(good) to HEAD(bad). Don't use relative ref paths.
	bi = "!f(){ good=\"$1\"; shift; git bisect start && git bisect bad && git checkout \"$good\" && git bisect good && git bisect run \"$@\" ;}; f"

	# toprun COMMAND {ARGS}: Run COMMAND ARGS in top-level directory of repo
	toprun = "!f(){ topdir=$(git rev-parse --show-toplevel) && cd \"$topdir\" && \"$@\" ;}; f"

	# mis-spellings that cause sl to run
	lal = !sl

	gud = !cowsay "You just have to git gud."

[merge]
	ff = only
	conflictstyle = diff3
	defaultToUpstream = True

[push]
	default = upstream

[fetch]
	prune = true

[diff]
	color=auto

[sendemail]
	smtpencryption = tls
	smtpserver = smtp.gmail.com
	smtpuser = mikelang3000@gmail.com
	smtpserverport = 587
	validate = False
	chainreplyto = True

[advice]
	statusHints = false
	pushNonFFCurrent = false
	detachedHead = false

[color]
	ui = auto

[status]
	# Don't collapse fully untracked folders down to just a folder name
	showUntrackedFiles = all

[commit]
	# Always show diff in commit message editor
	verbose = 1

[pager]
	# no pager for branch
	branch = 0

[http "https://gopkg.in"]
	followRedirects = True

[github]
	user = ekimekim
