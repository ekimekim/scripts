#!/bin/bash

if [ "$#" -lt 1 ]; then
	echo "USAGE: $0 BY_PROG" >&2
	echo "Print per-node resource usage grouped by the given BY_PROG." 2>&1
	echo "BY_PROG should be a jq program that takes a pod and produces a string." 2>&1
fi

kubectl get pods -o json --all-namespaces | jq -r '
	.items
	| map(
		select(.status.phase == "Running")
		| {
			node: .spec.nodeName,
			by: '"$1"',
			cpu: (
				.spec.containers[].resources.requests.cpu // "0"
				| if endswith("m") then (.[:-1]|tonumber|./1000) else tonumber end
			),
			memory: (
				.spec.containers[].resources.requests.memory // "0Ki"
				| (if endswith("i") then 2 else 1 end) as $unit_index
				| .[-$unit_index:] as $unit
				| (.[:-$unit_index] | tonumber) as $n
				| {
					Gi: (1024*1024*1024),
					Mi: (1024*1024),
					Ki: 1024,
					G: (1000*1000*1000),
					M: (1000*1000),
					K: 1000,
				}[$unit] as $scale
				| $n * $scale
				| . / pow(1024; 3)
			),
		}
	)
	| (map(.by) | unique) as $cols
	| (
		["NODE", "TOTAL"] + $cols,
		(
			group_by(.node)
			| .[]
			| . as $pods
			| [.[0].node] + (([null] + $cols) | map(
				. as $col
				| $pods
				| map(select(.by == $col or $col == null))
				| if length == 0 then "" else (
					{
						cpu: (map(.cpu) | add | . * 1000 | round | . / 1000),
						memory: (map(.memory) | add | . * 100 | round | . / 100),
					}
					| "\(.cpu)/\(.memory)Gi"
				) end
			))
		)
	)
	| join("\t")
' | tab2table
