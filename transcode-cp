#!/bin/env python2

import gevent.monkey
gevent.monkey.patch_all()

import logging
import os
import re
import traceback
from multiprocessing import cpu_count

from gevent.pool import Pool

import argh
from easycmd import cmd
from misc import AtomicReplace

AUDIO_EXTS = ['flac', 'aac', 'm4a', 'wav', 'ogg', 'mp3', 'wma', 'opus', 'webm', 'mp4']
DRY = False


def do(i, n, fn, src, dest, *args):
	print "Doing {}/{}: {} {}".format(i, n, fn.__name__, dest)
	try:
		dest_dir = os.path.dirname(dest)
		if not os.path.exists(dest_dir):
			os.makedirs(dest_dir)
		fn(src, dest, *args)
		print "Done {}/{}".format(i, n)
		return True
	except Exception:
		print "Failed {}/{}".format(i, n)
		traceback.print_exc()
		return False

def copy(src, dest):
	if not DRY:
		with AtomicReplace(dest) as tmp:
			cmd(['cp', src, tmp])


def convert(src, dest, ffargs):
	if not DRY:
		with AtomicReplace(dest) as tmp:
			cmd(['ffmpeg', '-i', src] + ffargs + [tmp])


def make_safe(s):
	return re.sub(r'[^a-zA-Z0-9/ .-]', '_', s)


def get_dest(src_root, dest_root, src, safe=False, ext='mp3'):
	rel_src_dir = os.path.relpath(os.path.dirname(src), src_root)
	src_name = os.path.basename(src)
	src_name, src_ext = os.path.splitext(src_name)
	dest_name = "{}.{}".format(src_name, ext or src_ext[1:])
	if safe:
		rel_src_dir = make_safe(rel_src_dir)
		dest_name = make_safe(dest_name)
	return os.path.join(dest_root, rel_src_dir, dest_name)


def do_file(pool, i, n, src, dest, ffargs, force=False, always_transcode=False):
	if os.path.exists(dest) and not force:
		print "Skipping {}/{}: already exists {}".format(i, n, dest)
		return
	_, ext = os.path.splitext(dest)
	ext = ext[1:]
	if (src.lower().endswith(ext) and not always_transcode) or not is_audio(src):
		return pool.spawn(do, i, n, copy, src, dest)
	else:
		return pool.spawn(do, i, n, convert, src, dest, ffargs)


def get_items(src_root, dest_root, stdin=False, safe=False, ext='mp3', non_audio=False):
	if stdin:
		items = (os.path.split(filepath.rstrip('\n')) for filepath in sys.stdin)
	else:
		items = (
			(path, filename)
			for path, _, files in os.walk(src_root)
			for filename in files
		)
	for path, filename in items:
		if non_audio or is_audio(filename):
			src = os.path.join(path, filename)
			if not os.path.exists(src):
				logging.warning("Path {!r} does not exist, skipping".format(src))
				continue
			dest = get_dest(src_root, dest_root, src, safe=safe, ext=ext if is_audio(filename) else None)
			yield src, dest


def is_audio(path):
	return any(path.lower().endswith(".{}".format(audio_ext)) for audio_ext in AUDIO_EXTS)


def get_exists_in_dest(dest_root):
	for path, _, files in os.walk(dest_root):
		for filename in files:
			if any(filename.lower().endswith(".{}".format(ext)) for ext in AUDIO_EXTS):
				filepath = os.path.join(path, filename)
				yield filepath


@argh.arg('--stdin', default=False, help="Instead of copying all files under SRC, only copy the files listed on stdin.")
@argh.arg('--force', default=False, help="Overwrite existing files in DEST")
@argh.arg('--safe', default=False, help=
	"Make the filenames 'safe' for weird filesystems (like NTFS) "
	"or applications that can't handle unicode "
	"by replacing all non-alphanumeric characters (except space, dot and dash) with underscores."
)
@argh.arg('--ext', default='mp3', help="File extension to convert to. Files that already have this extension are not transcoded.")
@argh.arg('--concurrency', default=cpu_count(), help="How many conversions to perform at once")
@argh.arg('--delete', default=False, help="Also delete any existing files in DEST that do not have a corresponding file in SRC")
@argh.arg('--non-audio', default=False, help="Also copy non-audio files")
@argh.arg('--always-transcode', default=False, help=
	"Always convert files, even if the extension already matches. "
	"This is useful if you want to apply particular encoding settings using FFARGS."
)
@argh.arg('src_root', metavar='SRC')
@argh.arg('dest_root', metavar='DEST')
@argh.arg('ffargs', help="Additional options to pass to ffmpeg when transcoding")
def main(src_root, dest_root, *ffargs, **kwargs):
	"""
	Copy all audio files from SRC to DEST, converting any that are not already in the format
	specified by EXT (default mp3).
	By default, does not overwrite existing destination files.
	"""
	force, stdin, safe, ext, concurrency, delete, non_audio, always_transcode = (kwargs[k] for k in ('force', 'stdin', 'safe', 'ext', 'concurrency', 'delete', 'non_audio', 'always_transcode'))
	items = list(get_items(src_root, dest_root, stdin=stdin, safe=safe, ext=ext, non_audio=non_audio))
	if delete:
		exists = set(get_exists_in_dest(dest_root))
		to_delete = exists - set(dest for src, dest in items)
		print "Deleting {} existing items".format(len(to_delete))
		for path in to_delete:
			os.remove(path)
	n = len(items)
	jobs = []
	pool = Pool(concurrency)
	try:
		for i, (src, dest) in enumerate(items):
			jobs.append(do_file(pool, i, n, src, dest, list(ffargs), force, always_transcode))
	finally:
		pool.join()
	if not all(job.get() for job in jobs if job):
		raise Exception("One or more jobs failed")


if __name__ == '__main__':
	import sys
	argh.dispatch_command(main)
