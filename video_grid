#!/bin/env python2

import math
import subprocess

import argh


@argh.arg('videos', nargs='+')
def main(output_file, videos, cols=4, size='1920x1080', dryrun=False):
	full_size = [int(part) for part in size.split('x')]
	rows = int(math.ceil(len(videos) / float(cols)))
	assert rows * cols >= len(videos)
	video_size = [part / count for part, count in zip(full_size, (cols, rows))]
	print "Putting {} videos into a {}x{} grid at {}x{} each".format(len(videos), cols, rows, *video_size)

	args = ['ffmpeg', '-hide_banner']
	for video in videos:
		args += ['-i', video]

	filters = []
	for i in range(len(videos)):
		filters.append('[{i}:v] setpts=PTS-STARTPTS, scale={size[0]}x{size[1]} [scaled{i}]'.format(i=i, size=video_size))
	for row in range(rows):
		inputs = ''.join('[scaled{}]'.format(i) for i in range(row * cols, (row + 1) * cols))
		filters.append('{} hstack=inputs={} [row{}]'.format(inputs, cols, row))
	inputs = ''.join('[row{}]'.format(row) for row in range(rows))
	filters.append('{} vstack=inputs={}'.format(inputs, rows))

	args += [
		'-filter_complex', ';\n'.join(filters),
		'-an', # no audio
		'-c:v', 'libx264',
		'-preset', 'ultrafast',
		'-crf', '0',
		'-vsync', '2',
		'-y', output_file,
	]

	print "Calling ffmpeg with args:"
	print ' '.join(args)

	if not dryrun:
		subprocess.check_call(args)


if __name__ == '__main__':
	argh.dispatch_command(main)
