#!/bin/env python

import gevent.monkey
gevent.monkey.patch_all()

import os

import argh

import requests
requests = requests.Session()
requests.headers['Client-ID'] = 'jzkbprff40iqj646a697cyrvl0zt2m6'

TWITCH = 'https://api.twitch.tv/kraken'
USER = os.environ.get('TWITCH_USER', 'ekimekim3000')

COLORS = {name: '\x1b[3{}m'.format(n) for n, name in enumerate([
	'black',
	'red',
	'green',
	'yellow',
	'blue',
	'purple',
	'cyan',
	'white',
	'reset'
])}

def fetch(*parts, **data):
	no_host = data.pop('no_host', False)
	if not no_host:
		parts = (TWITCH,) + parts
	resp = requests.get('/'.join(parts), params=data)
	resp.raise_for_status()
	return resp.json()

def fetch_all(key, *parts):
	"""Fetch pages from path until exhausted.
	key should be list of results to check in response.
	Returns list of all results
	"""
	path = '/'.join((TWITCH,) + parts)
	while True:
		data = fetch(path, limit=100, no_host=True)
		results = data[key]
		if not results:
			return
		for result in results:
			yield result
		path = data['_links']['next']

def is_live(name):
	return fetch('streams', name).get('stream', None) is not None

def get_channel_info(name):
	return is_live(name), fetch('channels', name)

@argh.arg('targets', nargs='*')
def main(targets, colors=True, urls=False):
	if not targets:
		targets = (o['channel']['name']
		           for o in fetch_all('follows', 'users', USER, 'follows', 'channels'))
	results = {name: gevent.spawn(get_channel_info, name) for name in targets}
	results = {name: g.get() for name, g in results.items()}
	for name, (live, channel) in results.items():
		if not live:
			continue
		fmt_args = channel.copy()
		fmt_args.update(COLORS)
		fmt_args['url'] = "https://twitch.tv/" if urls else ""
		print u"{black}{url}{green}{name}{black} playing {green}{game}{black}: {yellow}{status}{reset}".format(**fmt_args).encode('utf-8')


if __name__ == '__main__':
	argh.dispatch_command(main)
