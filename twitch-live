#!/bin/env python

import gevent.monkey
gevent.monkey.patch_all()

import logging
import os

from gevent.lock import Semaphore

import argh
import gtools

import requests
requests = requests.Session()
requests.headers['Client-ID'] = 'jzkbprff40iqj646a697cyrvl0zt2m6'

TWITCH = 'https://api.twitch.tv/kraken'
USER = os.environ.get('TWITCH_USER', 'ekimekim3000')

COLORS = {name: '\x1b[3{}m'.format(n) for n, name in enumerate([
	'black',
	'red',
	'green',
	'yellow',
	'blue',
	'purple',
	'cyan',
	'white',
	'reset'
])}

REQUEST_LIMITER = Semaphore(16)

def fetch(*parts, **data):
	no_host = data.pop('no_host', False)
	if not no_host:
		parts = (TWITCH,) + parts
	with REQUEST_LIMITER:
		resp = requests.get('/'.join(parts), params=data)
	resp.raise_for_status()
	return resp.json()

def fetch_all(key, *parts, **data):
	"""Fetch pages from path until exhausted.
	key should be list of results to check in response.
	Returns list of all results
	"""
	path = '/'.join((TWITCH,) + parts)
	while True:
		data = fetch(path, limit=100, no_host=True, **data)
		results = data[key]
		if not results:
			return
		for result in results:
			yield result
		path = data['_links']['next']

def get_info(name):
	stream = gevent.spawn(fetch, 'streams', name)
	channel = gevent.spawn(fetch, 'channels', name)
	ret = stream.get().get('stream'), channel.get()
	logging.debug("got info on {}".format(name))
	return ret

def get_games(user):
	return [o['name'] for o in
		    fetch('https://api.twitch.tv/api', 'users', user, 'follows', 'games', no_host=True)['follows']]

@argh.arg('targets', nargs='*')
def main(targets, colors=True, urls=False, games=True, debug=0):
	if debug:
		logging.basicConfig(level='DEBUG')
		gtools.backdoor(debug)
	else:
		logging.basicConfig(level='ERROR')
	if targets:
		targets = [('any', target) for target in targets]
	else:
		follows = (('any', o['channel']['name'])
		           for o in fetch_all('follows', 'users', USER, 'follows', 'channels'))
		if games:
			games = ((game, o['channel']['name'])
				for game in get_games(USER)
				for o in fetch_all('streams', 'streams', game=game)
			)
		targets = gtools.merge_iters(follows, games)

	channels = {}
	for game, target in targets:
		if target in channels:
			channels[target][0] |= {game}
		else:
			channels[target] = [{game}, gevent.spawn(get_info, target)]
	channels = [
		(name, games) + g.get()
		for name, (games, g) in channels.items()
	]
	channels = filter(lambda (n,g,s,c): s is not None, channels) # filter out not-live
	sort_key = lambda (n,g,s,c): ('' if 'any' in g else s['game'], n) # sort any-game targets first, then by game

	for name, games, stream, channel in sorted(channels, key=sort_key):
		if 'any' not in games and stream['game'] not in games:
			continue # we searched this channel for a specific game, and they've since changed game
		fmt_args = channel.copy()
		fmt_args.update(stream)
		fmt_args.update(COLORS)
		fmt_args['url'] = "https://twitch.tv/" if urls else ""
		fmt_args['name_color'] = COLORS['yellow'] if 'any' in games else COLORS['green']
		print u"{black}{url}{name_color}{name}{black} playing {green}{game}{black}: {yellow}{status}{reset}".format(**fmt_args).encode('utf-8')


if __name__ == '__main__':
	argh.dispatch_command(main)
