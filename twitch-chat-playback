#!/bin/env python2

from calendar import timegm
import argh
import errno
import logging
import re
import sys
import time

import gevent
import gevent.event
import gevent.pool
import gevent.select

from monotonic import monotonic

import lineedit

from requests import HTTPError
import requests
requests = requests.Session()
requests.headers['Client-ID'] = 'jzkbprff40iqj646a697cyrvl0zt2m6'

TWITCH_API = 'https://api.twitch.tv/kraken'
TWITCH_RECHAT = 'https://rechat.twitch.tv/rechat-messages'
WINDOW = 30 # twitch messages are only available in chunks of 30s, relative to start of video
SENDER_WIDTH = 11 # for display


def fetch(*parts, **data):
	resp = requests.get('/'.join(parts), params=data)
	resp.raise_for_status()
	return resp.json()


def format_video_time(t):
	t = int(t)
	hours, mins, secs = t / 3600, (t / 60) % 60, t % 60
	return '{:02d}:{:02d}:{:02d}'.format(hours, mins, secs)


def display(message, video_start_time):
	print u'[{time}] {from:>{SENDER_WIDTH}}: {message}'.format(
		SENDER_WIDTH=SENDER_WIDTH,
		time=format_video_time(message['attributes']['timestamp'] / 1000. - video_start_time),
		**message['attributes']
	).encode('utf-8')


class Timer(object):
	"""A timer where you can set and get the time, which counts along with wall clock time"""
	def __init__(self, start_time):
		self.logger = logging.Logger(type(self).__name__).getChild(str(id(self)))
		self.paused_at = None
		self.set(start_time)
		self._changed_state = gevent.event.Event()

	@property
	def paused(self):
		return self.paused_at is not None

	def set(self, current_time):
		if self.paused:
			self.logger.debug("Set time while paused to {}".format(current_time))
			self.paused_at = current_time
			return
		self.offset = monotonic() - current_time # seconds different to real time
		self.logger.debug("Set offset to {} for current time of {}".format(self.offset, current_time))

	def get(self, now=None):
		if self.paused:
			current_time = self.paused_at
		else:
			current_time = monotonic() - self.offset
		self.logger.debug("Got current time: {}".format(current_time))
		return current_time

	def pause(self):
		self.paused_at = self.get()
		self.logger.debug("Paused timer at time {}".format(self.paused_at))
		self._wake_waiters()

	def unpause(self):
		if not self.paused:
			return
		paused_time = self.paused_at
		self.logger.debug("Unpausing timer at time {}".format(paused_time))
		self.paused_at = None
		self.set(paused_time)
		self._wake_waiters()

	def wait(self, target_time):
		while True:
			time_until = target_time - self.get()
			self.logger.debug("wait until {}: {} to go".format(target_time, time_until))
			if time_until <= 0:
				return
			if self.paused:
				self.logger.debug("wait until {}: waiting for unpause".format(target_time))
				time_until = None # wait forever (until woken by unpause)
			else:
				self.logger.debug("wait until {}: waiting {} or until pause".format(target_time, time_until))
			# wait for either time_until or until state change (pause/unpause) and check again
			self._changed_state.wait(time_until)

	def _wake_waiters(self):
		# wake current waiters and reset event so new waiters can start waiting
		self.logger.debug("Waking waiters")
		self._changed_state.set()
		self._changed_state = gevent.event.Event()


@argh.arg('video_id', help='Video ID or playback URL')
@argh.arg('start_at', help='start time within the video, as integer seconds or [hh:]mm:ss', default='0', nargs='?')
def main(video_id, start_at, log='WARNING'):
	logging.basicConfig(level=log)

	# parse video id from url
	match = re.match(r"(https?://)?(www\.)?twitch.tv/.+/(?P<id>[^/]+)", video_id)
	if match:
		video_id = 'v{}'.format(match.group('id'))

	# parse start_at into int seconds
	parts = start_at.split(':')
	if len(parts) > 3:
		raise ValueError("Bad start time")
	parts = map(int, parts)[::-1] # parts is now eg. (seconds, minutes, hours)
	start_at = sum(value * 60**n for n, value in enumerate(parts))

	# get details on video
	try:
		video = fetch(TWITCH_API, 'videos', video_id)
	except HTTPError as e:
		if e.response.status_code in (400, 404):
			raise ValueError("Bad or non-existent video id")
		raise

	logging.info("Got video info: {}".format(video))

	video_start_time = timegm(time.strptime(video['recorded_at'], '%Y-%m-%dT%H:%M:%SZ'))
	end_time = video_start_time + video['length']
	start_time = video_start_time + start_at
	timer = Timer(start_time)

	group = gevent.pool.Group()
	group.spawn(output_loop, timer, video_id, video_start_time, end_time, start_at)
	group.spawn(input_loop, timer, video_start_time)
	try:
		gevent.wait(group, count=1) # wait for any one to finish
	finally:
		group.kill() # then kill the rest


def output_loop(timer, video_id, video_start_time, end_time, start_at):
	poll_start_time = video_start_time + int(start_at / WINDOW) * WINDOW # truncate to previous window
	for poll_time in xrange(poll_start_time, end_time, WINDOW):
		timer.wait(poll_time)
		# get messages for next POLL_INTERVAL seconds
		messages = fetch(TWITCH_RECHAT, video_id=video_id, start=poll_time)['data']
		logging.debug("got {} messages".format(len(messages)))
		# we assume the messages are already in display order
		for message in messages:
			logging.debug("waiting for message {}".format(message['id']))
			timer.wait(message['attributes']['timestamp'] / 1000.)
			logging.debug("displaying message {}".format(message['id']))
			display(message, video_start_time)
	print 'Video is finished'


def input_loop(timer, video_start_time):
	# we're not actually using lineedit, but we want the same termattrs
	with lineedit.get_termattrs(), lineedit.HiddenCursor():
		while True:
			try:
				r, w, x = gevent.select.select([sys.stdin], [], [])
			except EnvironmentError as e:
				if e.errno == errno.EINTR:
					continue
				raise
			if sys.stdin not in r:
				continue
			c = sys.stdin.read(1)
			if c == ' ':
				if timer.paused:
					print 'Unpaused'
					timer.unpause()
				else:
					timer.pause()
					print 'Paused at {}'.format(format_video_time(timer.get() - video_start_time))
			elif c == 'q':
				print 'Quit'
				return


if __name__ == '__main__':
	argh.dispatch_command(main)
